"JSON_WITH\nLenguaje interpretado\n Un lenguaje interpretado es un lenguaje de programaci\u00f3n para el que la mayor\u00eda de sus implementaciones ejecuta las instrucciones directamente, sin una previa compilaci\u00f3n del programa a instrucciones en lenguaje m\u00e1quina.\n El int\u00e9rprete ejecuta el programa directamente, traduciendo cada sentencia en una secuencia de una o m\u00e1s subrutinas ya compiladas en c\u00f3digo m\u00e1quina.\n Los t\u00e9rminos lenguaje interpretado y lenguaje compilado\u200b no est\u00e1n bien definidos porque, en teor\u00eda, cualquier lenguaje de programaci\u00f3n puede ser interpretado o compilado.\n Cada vez es m\u00e1s popular, en las implementaciones m\u00e1s modernas de un lenguaje de programaci\u00f3n, ofrecer ambas opciones.\n Los lenguajes interpretados tambi\u00e9n pueden diferenciarse de los lenguajes de m\u00e1quina.\n Funcionalmente, tanto la ejecuci\u00f3n y la interpretaci\u00f3n significan lo mismo -obtener la siguiente instrucci\u00f3n/sentencia del programa y su ejecuci\u00f3n-.\n Aunque el bytecode (c\u00f3digo byte) interpretado es adem\u00e1s id\u00e9ntico a su forma en c\u00f3digo m\u00e1quina y tiene una representaci\u00f3n en ensamblador, el t\u00e9rmino 'interpretado' se reserva en la pr\u00e1ctica para lenguajes 'procesados por software' (como las m\u00e1quinas virtuales o emuladores) por encima del procesado nativo (por ejemplo, por hardware).\n En principio, los programas de muchos lenguajes se pueden compilar o interpretar, emular o ejecutar nativamente, as\u00ed que esta designaci\u00f3n se aplica solamente a la implementaci\u00f3n pr\u00e1ctica m\u00e1s usual, en vez de representar una propiedad esencial del lenguaje.\n De forma parecida al microc\u00f3digo del procesador, muchos int\u00e9rpretes, internamente recaen en una compilaci\u00f3n en tiempo de ejecuci\u00f3n.\n Evitando la compilaci\u00f3n, los programas interpretados son m\u00e1s f\u00e1ciles de evolucionar durante el desarrollo y la ejecuci\u00f3n (transform\u00e1ndose en ocasiones de uno en la otra).\n De otra parte, ya que la compilaci\u00f3n implica una traducci\u00f3n a un formato m\u00e1s amigable con la m\u00e1quina, los programas interpretados corren m\u00e1s lentamente y menos eficientemente (es decir, gastan considerablemente m\u00e1s energ\u00eda).\n Esto es especialmente verdad para los lenguajes de guion, cuyas sentencias son m\u00e1s complejas de analizar comparadas con las instrucciones m\u00e1quina.\n Muchos lenguajes se han implementado usando tanto compiladores como int\u00e9rpretes, incluyendo BASIC, C, Lisp, Pascal y Python. Java y C# se compilan a c\u00f3digo byte, el lenguaje interpretado espec\u00edfico para la m\u00e1quina virtual.\n Muchas implementaciones de Lisp pueden mezclar libremente c\u00f3digo interpretado y compilado. "